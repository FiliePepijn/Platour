"use strict";
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function _ts_generator(thisArg, body) {
    var f, y, t, g, _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    };
    return(g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g);
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = function(target, all) {
    for(var name in all)__defProp(target, name, {
        get: all[name],
        enumerable: true
    });
};
var __copyProps = function(to, from, except, desc) {
    if (from && typeof from === "object" || typeof from === "function") {
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            var _loop = function() {
                var key = _step.value;
                if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {
                    get: function() {
                        return from[key];
                    },
                    enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable
                });
            };
            for(var _iterator = __getOwnPropNames(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    }
    return to;
};
var __toESM = function(mod, isNodeMode, target) {
    return target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
        value: mod,
        enumerable: true
    }) : target, mod);
};
var __toCommonJS = function(mod) {
    return __copyProps(__defProp({}, "__esModule", {
        value: true
    }), mod);
};
// libs/index.ts
var libs_exports = {};
__export(libs_exports, {
    default: function() {
        return DynamicPublicDirectory;
    }
});
module.exports = __toCommonJS(libs_exports);
// libs/server.ts
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
var import_mime_types = __toESM(require("mime-types"));
var mimeTypes = {
    ".html": "text/html",
    ".js": "text/javascript",
    ".css": "text/css",
    ".png": "image/png",
    ".jpg": "image/jpeg",
    ".gif": "image/gif",
    ".svg": "image/svg+xml",
    ".json": "application/json",
    ".woff": "font/woff",
    ".woff2": "font/woff2",
    ".ttf": "font/ttf",
    ".eot": "font/eot",
    ".otf": "font/otf",
    ".wasm": "application/wasm",
    ".mjs": "text/javascript",
    ".txt": "text/plain",
    ".xml": "text/xml",
    ".mp3": "audio/mpeg",
    ".mp4": "video/mp4",
    ".webm": "video/webm",
    ".webp": "image/webp",
    ".wgsl": "text/wgsl",
    ".ico": "image/x-icon",
    ".tiff": "image/tiff",
    ".gz": "application/gzip",
    ".zip": "application/zip",
    ".rar": "application/x-rar-compressed",
    ".7z": "application/x-7z-compressed"
};
function getFiles(dir, files_) {
    files_ = files_ || [];
    var files = import_fs.default.readdirSync(dir);
    for(var i in files){
        var name = dir + "/" + files[i];
        if (import_fs.default.statSync(name).isDirectory()) {
            getFiles(name, files_);
        } else {
            files_.push(name);
        }
    }
    return files_;
}
function getContentType(file) {
    return import_mime_types.default.lookup(file);
}
function handleWriteToServe(res, req, contentType, path2) {
    res.setHeader("Cache-Control", "max-age=31536000, immutable");
    res.setHeader("Content-Type", contentType);
    res.write(import_fs.default.readFileSync(path2));
    res.end();
}
var postfixRE = RegExp("[?#].*$", "s");
function toFilePath() {
    var url = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    var filePath = url.replace(postfixRE, "");
    return filePath;
}
function ServerMiddleWare(payload) {
    var server = payload.server, assets = payload.assets, options = payload.options;
    var _ref = options || {}, tmp = _ref.mimeTypes, types = tmp === void 0 ? {} : tmp, ssr = _ref.ssr;
    if (!assets || !assets.length) return;
    var fileObject = [];
    for(var i = 0; i < assets.length; i++){
        var files = getFiles(import_path.default.join(process.cwd(), "/".concat(assets[i])), []);
        fileObject.push({
            name: assets[i],
            files: files
        });
    }
    var mergeMimeTypes = _object_spread({}, mimeTypes, types);
    return function() {
        server.middlewares.use(function() {
            var _ref = _async_to_generator(function(req, res, next) {
                var _loop, i, _ret;
                return _ts_generator(this, function(_state) {
                    _loop = function(i) {
                        var file = import_path.default.join(process.cwd(), "".concat(fileObject[i].name, "/").concat(toFilePath(req.originalUrl)));
                        if (fileObject[i].files.some(function(f) {
                            return import_path.default.relative(f, file) === "";
                        })) {
                            var extension = file.substring(file.lastIndexOf("."));
                            var contentType = mergeMimeTypes[extension] || getContentType(file);
                            if (ssr) res.addListener("pipe", function() {
                                handleWriteToServe(res, req, contentType, file);
                            });
                            else {
                                handleWriteToServe(res, req, contentType, file);
                            }
                            return "break";
                        }
                    };
                    for(i = 0; i < fileObject.length; i++){
                        _ret = _loop(i);
                        if (_ret === "break") break;
                    }
                    next();
                    return [
                        2
                    ];
                });
            });
            return function(req, res, next) {
                return _ref.apply(this, arguments);
            };
        }());
    };
}
// libs/build.ts
var import_fs2 = __toESM(require("fs"));
function copyRecursively(src, dst) {
    if (import_fs2.default.statSync(src).isDirectory()) {
        if (!import_fs2.default.existsSync(dst)) {
            import_fs2.default.mkdirSync(dst);
        }
        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
        try {
            for(var _iterator = import_fs2.default.readdirSync(src)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                var file = _step.value;
                copyRecursively(src + "/" + file, dst + "/" + file);
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally{
            try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                }
            } finally{
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }
    } else {
        import_fs2.default.copyFileSync(src, dst);
    }
}
function buildMiddleWare(options) {
    var assets = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var dst = options.dir;
    if (!dst) throw new Error("options.dir is undefined");
    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;
    try {
        for(var _iterator = assets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var dir = _step.value;
            copyRecursively(dir, dst);
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
            }
        } finally{
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }
}
// libs/index.ts
function DynamicPublicDirectory(assets) {
    var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    return {
        configureServer: function configureServer(server) {
            return ServerMiddleWare({
                server: server,
                assets: assets,
                options: opts
            });
        },
        writeBundle: function writeBundle(options) {
            return _async_to_generator(function() {
                return _ts_generator(this, function(_state) {
                    buildMiddleWare(options, assets);
                    return [
                        2
                    ];
                });
            })();
        },
        name: "dynamic assets"
    };
}
