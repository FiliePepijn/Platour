// libs/server.ts
import fs from "fs";
import path from "path";
import mime from "mime-types";
var mimeTypes = {
  ".html": "text/html",
  ".js": "text/javascript",
  ".css": "text/css",
  ".png": "image/png",
  ".jpg": "image/jpeg",
  ".gif": "image/gif",
  ".svg": "image/svg+xml",
  ".json": "application/json",
  ".woff": "font/woff",
  ".woff2": "font/woff2",
  ".ttf": "font/ttf",
  ".eot": "font/eot",
  ".otf": "font/otf",
  ".wasm": "application/wasm",
  ".mjs": "text/javascript",
  ".txt": "text/plain",
  ".xml": "text/xml",
  ".mp3": "audio/mpeg",
  ".mp4": "video/mp4",
  ".webm": "video/webm",
  ".webp": "image/webp",
  ".wgsl": "text/wgsl",
  ".ico": "image/x-icon",
  ".tiff": "image/tiff",
  ".gz": "application/gzip",
  ".zip": "application/zip",
  ".rar": "application/x-rar-compressed",
  ".7z": "application/x-7z-compressed"
};
function getFiles(dir, files_) {
  files_ = files_ || [];
  const files = fs.readdirSync(dir);
  for (const i in files) {
    const name = dir + "/" + files[i];
    if (fs.statSync(name).isDirectory()) {
      getFiles(name, files_);
    } else {
      files_.push(name);
    }
  }
  return files_;
}
function getContentType(file) {
  return mime.lookup(file);
}
function handleWriteToServe(res, req, contentType, path2) {
  res.setHeader("Cache-Control", "max-age=31536000, immutable");
  res.setHeader("Content-Type", contentType);
  res.write(fs.readFileSync(path2));
  res.end();
}
var postfixRE = /[?#].*$/s;
function toFilePath(url = "") {
  let filePath = url.replace(postfixRE, "");
  return filePath;
}
function ServerMiddleWare(payload) {
  const { server, assets, options } = payload;
  const { mimeTypes: types = {}, ssr } = options || {};
  if (!assets || !assets.length)
    return;
  const fileObject = [];
  for (let i = 0; i < assets.length; i++) {
    const files = getFiles(path.join(process.cwd(), `/${assets[i]}`), []);
    fileObject.push({
      name: assets[i],
      files
    });
  }
  let mergeMimeTypes = { ...mimeTypes, ...types };
  return () => {
    server.middlewares.use(async (req, res, next) => {
      for (let i = 0; i < fileObject.length; i++) {
        const file = path.join(process.cwd(), `${fileObject[i].name}/${toFilePath(req.originalUrl)}`);
        if (fileObject[i].files.some((f) => path.relative(f, file) === "")) {
          const extension = file.substring(file.lastIndexOf("."));
          const contentType = mergeMimeTypes[extension] || getContentType(file);
          if (ssr)
            res.addListener("pipe", () => {
              handleWriteToServe(res, req, contentType, file);
            });
          else {
            handleWriteToServe(res, req, contentType, file);
          }
          break;
        }
      }
      next();
    });
  };
}

// libs/build.ts
import fs2 from "fs";
function copyRecursively(src, dst) {
  if (fs2.statSync(src).isDirectory()) {
    if (!fs2.existsSync(dst)) {
      fs2.mkdirSync(dst);
    }
    for (const file of fs2.readdirSync(src)) {
      copyRecursively(src + "/" + file, dst + "/" + file);
    }
  } else {
    fs2.copyFileSync(src, dst);
  }
}
function buildMiddleWare(options, assets = []) {
  const dst = options.dir;
  if (!dst)
    throw new Error("options.dir is undefined");
  for (const dir of assets) {
    copyRecursively(dir, dst);
  }
}

// libs/index.ts
function DynamicPublicDirectory(assets, opts = {}) {
  return {
    configureServer(server) {
      return ServerMiddleWare({ server, assets, options: opts });
    },
    async writeBundle(options) {
      buildMiddleWare(options, assets);
    },
    name: "dynamic assets"
  };
}
export {
  DynamicPublicDirectory as default
};
