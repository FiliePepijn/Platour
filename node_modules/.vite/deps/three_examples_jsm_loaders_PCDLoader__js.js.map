{
  "version": 3,
  "sources": ["../../three/examples/jsm/loaders/PCDLoader.js"],
  "sourcesContent": ["import {\r\n\tBufferGeometry,\r\n\tColor,\r\n\tFileLoader,\r\n\tFloat32BufferAttribute,\r\n\tInt32BufferAttribute,\r\n\tLoader,\r\n\tPoints,\r\n\tPointsMaterial\r\n} from 'three';\r\n\r\nclass PCDLoader extends Loader {\r\n\r\n\tconstructor( manager ) {\r\n\r\n\t\tsuper( manager );\r\n\r\n\t\tthis.littleEndian = true;\r\n\r\n\t}\r\n\r\n\tload( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst loader = new FileLoader( scope.manager );\r\n\t\tloader.setPath( scope.path );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.setRequestHeader( scope.requestHeader );\r\n\t\tloader.setWithCredentials( scope.withCredentials );\r\n\t\tloader.load( url, function ( data ) {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tonLoad( scope.parse( data ) );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tif ( onError ) {\r\n\r\n\t\t\t\t\tonError( e );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( e );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n\tparse( data ) {\r\n\r\n\t\t// from https://gitlab.com/taketwo/three-pcd-loader/blob/master/decompress-lzf.js\r\n\r\n\t\tfunction decompressLZF( inData, outLength ) {\r\n\r\n\t\t\tconst inLength = inData.length;\r\n\t\t\tconst outData = new Uint8Array( outLength );\r\n\t\t\tlet inPtr = 0;\r\n\t\t\tlet outPtr = 0;\r\n\t\t\tlet ctrl;\r\n\t\t\tlet len;\r\n\t\t\tlet ref;\r\n\t\t\tdo {\r\n\r\n\t\t\t\tctrl = inData[ inPtr ++ ];\r\n\t\t\t\tif ( ctrl < ( 1 << 5 ) ) {\r\n\r\n\t\t\t\t\tctrl ++;\r\n\t\t\t\t\tif ( outPtr + ctrl > outLength ) throw new Error( 'Output buffer is not large enough' );\r\n\t\t\t\t\tif ( inPtr + ctrl > inLength ) throw new Error( 'Invalid compressed data' );\r\n\t\t\t\t\tdo {\r\n\r\n\t\t\t\t\t\toutData[ outPtr ++ ] = inData[ inPtr ++ ];\r\n\r\n\t\t\t\t\t} while ( -- ctrl );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tlen = ctrl >> 5;\r\n\t\t\t\t\tref = outPtr - ( ( ctrl & 0x1f ) << 8 ) - 1;\r\n\t\t\t\t\tif ( inPtr >= inLength ) throw new Error( 'Invalid compressed data' );\r\n\t\t\t\t\tif ( len === 7 ) {\r\n\r\n\t\t\t\t\t\tlen += inData[ inPtr ++ ];\r\n\t\t\t\t\t\tif ( inPtr >= inLength ) throw new Error( 'Invalid compressed data' );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tref -= inData[ inPtr ++ ];\r\n\t\t\t\t\tif ( outPtr + len + 2 > outLength ) throw new Error( 'Output buffer is not large enough' );\r\n\t\t\t\t\tif ( ref < 0 ) throw new Error( 'Invalid compressed data' );\r\n\t\t\t\t\tif ( ref >= outPtr ) throw new Error( 'Invalid compressed data' );\r\n\t\t\t\t\tdo {\r\n\r\n\t\t\t\t\t\toutData[ outPtr ++ ] = outData[ ref ++ ];\r\n\r\n\t\t\t\t\t} while ( -- len + 2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} while ( inPtr < inLength );\r\n\r\n\t\t\treturn outData;\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseHeader( data ) {\r\n\r\n\t\t\tconst PCDheader = {};\r\n\t\t\tconst result1 = data.search( /[\\r\\n]DATA\\s(\\S*)\\s/i );\r\n\t\t\tconst result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec( data.slice( result1 - 1 ) );\r\n\r\n\t\t\tPCDheader.data = result2[ 1 ];\r\n\t\t\tPCDheader.headerLen = result2[ 0 ].length + result1;\r\n\t\t\tPCDheader.str = data.slice( 0, PCDheader.headerLen );\r\n\r\n\t\t\t// remove comments\r\n\r\n\t\t\tPCDheader.str = PCDheader.str.replace( /#.*/gi, '' );\r\n\r\n\t\t\t// parse\r\n\r\n\t\t\tPCDheader.version = /VERSION (.*)/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.fields = /FIELDS (.*)/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.size = /SIZE (.*)/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.type = /TYPE (.*)/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.count = /COUNT (.*)/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.width = /WIDTH (.*)/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.height = /HEIGHT (.*)/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.viewpoint = /VIEWPOINT (.*)/i.exec( PCDheader.str );\r\n\t\t\tPCDheader.points = /POINTS (.*)/i.exec( PCDheader.str );\r\n\r\n\t\t\t// evaluate\r\n\r\n\t\t\tif ( PCDheader.version !== null )\r\n\t\t\t\tPCDheader.version = parseFloat( PCDheader.version[ 1 ] );\r\n\r\n\t\t\tPCDheader.fields = ( PCDheader.fields !== null ) ? PCDheader.fields[ 1 ].split( ' ' ) : [];\r\n\r\n\t\t\tif ( PCDheader.type !== null )\r\n\t\t\t\tPCDheader.type = PCDheader.type[ 1 ].split( ' ' );\r\n\r\n\t\t\tif ( PCDheader.width !== null )\r\n\t\t\t\tPCDheader.width = parseInt( PCDheader.width[ 1 ] );\r\n\r\n\t\t\tif ( PCDheader.height !== null )\r\n\t\t\t\tPCDheader.height = parseInt( PCDheader.height[ 1 ] );\r\n\r\n\t\t\tif ( PCDheader.viewpoint !== null )\r\n\t\t\t\tPCDheader.viewpoint = PCDheader.viewpoint[ 1 ];\r\n\r\n\t\t\tif ( PCDheader.points !== null )\r\n\t\t\t\tPCDheader.points = parseInt( PCDheader.points[ 1 ], 10 );\r\n\r\n\t\t\tif ( PCDheader.points === null )\r\n\t\t\t\tPCDheader.points = PCDheader.width * PCDheader.height;\r\n\r\n\t\t\tif ( PCDheader.size !== null ) {\r\n\r\n\t\t\t\tPCDheader.size = PCDheader.size[ 1 ].split( ' ' ).map( function ( x ) {\r\n\r\n\t\t\t\t\treturn parseInt( x, 10 );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( PCDheader.count !== null ) {\r\n\r\n\t\t\t\tPCDheader.count = PCDheader.count[ 1 ].split( ' ' ).map( function ( x ) {\r\n\r\n\t\t\t\t\treturn parseInt( x, 10 );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tPCDheader.count = [];\r\n\r\n\t\t\t\tfor ( let i = 0, l = PCDheader.fields.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tPCDheader.count.push( 1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tPCDheader.offset = {};\r\n\r\n\t\t\tlet sizeSum = 0;\r\n\r\n\t\t\tfor ( let i = 0, l = PCDheader.fields.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tif ( PCDheader.data === 'ascii' ) {\r\n\r\n\t\t\t\t\tPCDheader.offset[ PCDheader.fields[ i ] ] = i;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tPCDheader.offset[ PCDheader.fields[ i ] ] = sizeSum;\r\n\t\t\t\t\tsizeSum += PCDheader.size[ i ] * PCDheader.count[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// for binary only\r\n\r\n\t\t\tPCDheader.rowSize = sizeSum;\r\n\r\n\t\t\treturn PCDheader;\r\n\r\n\t\t}\r\n\r\n\t\tconst textData = new TextDecoder().decode( data );\r\n\r\n\t\t// parse header (always ascii format)\r\n\r\n\t\tconst PCDheader = parseHeader( textData );\r\n\r\n\t\t// parse data\r\n\r\n\t\tconst position = [];\r\n\t\tconst normal = [];\r\n\t\tconst color = [];\r\n\t\tconst intensity = [];\r\n\t\tconst label = [];\r\n\r\n\t\tconst c = new Color();\r\n\r\n\t\t// ascii\r\n\r\n\t\tif ( PCDheader.data === 'ascii' ) {\r\n\r\n\t\t\tconst offset = PCDheader.offset;\r\n\t\t\tconst pcdData = textData.slice( PCDheader.headerLen );\r\n\t\t\tconst lines = pcdData.split( '\\n' );\r\n\r\n\t\t\tfor ( let i = 0, l = lines.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tif ( lines[ i ] === '' ) continue;\r\n\r\n\t\t\t\tconst line = lines[ i ].split( ' ' );\r\n\r\n\t\t\t\tif ( offset.x !== undefined ) {\r\n\r\n\t\t\t\t\tposition.push( parseFloat( line[ offset.x ] ) );\r\n\t\t\t\t\tposition.push( parseFloat( line[ offset.y ] ) );\r\n\t\t\t\t\tposition.push( parseFloat( line[ offset.z ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.rgb !== undefined ) {\r\n\r\n\t\t\t\t\tconst rgb_field_index = PCDheader.fields.findIndex( ( field ) => field === 'rgb' );\r\n\t\t\t\t\tconst rgb_type = PCDheader.type[ rgb_field_index ];\r\n\r\n\t\t\t\t\tconst float = parseFloat( line[ offset.rgb ] );\r\n\t\t\t\t\tlet rgb = float;\r\n\r\n\t\t\t\t\tif ( rgb_type === 'F' ) {\r\n\r\n\t\t\t\t\t\t// treat float values as int\r\n\t\t\t\t\t\t// https://github.com/daavoo/pyntcloud/pull/204/commits/7b4205e64d5ed09abe708b2e91b615690c24d518\r\n\t\t\t\t\t\tconst farr = new Float32Array( 1 );\r\n\t\t\t\t\t\tfarr[ 0 ] = float;\r\n\t\t\t\t\t\trgb = new Int32Array( farr.buffer )[ 0 ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst r = ( ( rgb >> 16 ) & 0x0000ff ) / 255;\r\n\t\t\t\t\tconst g = ( ( rgb >> 8 ) & 0x0000ff ) / 255;\r\n\t\t\t\t\tconst b = ( ( rgb >> 0 ) & 0x0000ff ) / 255;\r\n\r\n\t\t\t\t\tc.set( r, g, b ).convertSRGBToLinear();\r\n\r\n\t\t\t\t\tcolor.push( c.r, c.g, c.b );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.normal_x !== undefined ) {\r\n\r\n\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_x ] ) );\r\n\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_y ] ) );\r\n\t\t\t\t\tnormal.push( parseFloat( line[ offset.normal_z ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.intensity !== undefined ) {\r\n\r\n\t\t\t\t\tintensity.push( parseFloat( line[ offset.intensity ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.label !== undefined ) {\r\n\r\n\t\t\t\t\tlabel.push( parseInt( line[ offset.label ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// binary-compressed\r\n\r\n\t\t// normally data in PCD files are organized as array of structures: XYZRGBXYZRGB\r\n\t\t// binary compressed PCD files organize their data as structure of arrays: XXYYZZRGBRGB\r\n\t\t// that requires a totally different parsing approach compared to non-compressed data\r\n\r\n\t\tif ( PCDheader.data === 'binary_compressed' ) {\r\n\r\n\t\t\tconst sizes = new Uint32Array( data.slice( PCDheader.headerLen, PCDheader.headerLen + 8 ) );\r\n\t\t\tconst compressedSize = sizes[ 0 ];\r\n\t\t\tconst decompressedSize = sizes[ 1 ];\r\n\t\t\tconst decompressed = decompressLZF( new Uint8Array( data, PCDheader.headerLen + 8, compressedSize ), decompressedSize );\r\n\t\t\tconst dataview = new DataView( decompressed.buffer );\r\n\r\n\t\t\tconst offset = PCDheader.offset;\r\n\r\n\t\t\tfor ( let i = 0; i < PCDheader.points; i ++ ) {\r\n\r\n\t\t\t\tif ( offset.x !== undefined ) {\r\n\r\n\t\t\t\t\tconst xIndex = PCDheader.fields.indexOf( 'x' );\r\n\t\t\t\t\tconst yIndex = PCDheader.fields.indexOf( 'y' );\r\n\t\t\t\t\tconst zIndex = PCDheader.fields.indexOf( 'z' );\r\n\t\t\t\t\tposition.push( dataview.getFloat32( ( PCDheader.points * offset.x ) + PCDheader.size[ xIndex ] * i, this.littleEndian ) );\r\n\t\t\t\t\tposition.push( dataview.getFloat32( ( PCDheader.points * offset.y ) + PCDheader.size[ yIndex ] * i, this.littleEndian ) );\r\n\t\t\t\t\tposition.push( dataview.getFloat32( ( PCDheader.points * offset.z ) + PCDheader.size[ zIndex ] * i, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.rgb !== undefined ) {\r\n\r\n\t\t\t\t\tconst rgbIndex = PCDheader.fields.indexOf( 'rgb' );\r\n\r\n\t\t\t\t\tconst r = dataview.getUint8( ( PCDheader.points * offset.rgb ) + PCDheader.size[ rgbIndex ] * i + 2 ) / 255.0;\r\n\t\t\t\t\tconst g = dataview.getUint8( ( PCDheader.points * offset.rgb ) + PCDheader.size[ rgbIndex ] * i + 1 ) / 255.0;\r\n\t\t\t\t\tconst b = dataview.getUint8( ( PCDheader.points * offset.rgb ) + PCDheader.size[ rgbIndex ] * i + 0 ) / 255.0;\r\n\r\n\t\t\t\t\tc.set( r, g, b ).convertSRGBToLinear();\r\n\r\n\t\t\t\t\tcolor.push( c.r, c.g, c.b );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.normal_x !== undefined ) {\r\n\r\n\t\t\t\t\tconst xIndex = PCDheader.fields.indexOf( 'normal_x' );\r\n\t\t\t\t\tconst yIndex = PCDheader.fields.indexOf( 'normal_y' );\r\n\t\t\t\t\tconst zIndex = PCDheader.fields.indexOf( 'normal_z' );\r\n\t\t\t\t\tnormal.push( dataview.getFloat32( ( PCDheader.points * offset.normal_x ) + PCDheader.size[ xIndex ] * i, this.littleEndian ) );\r\n\t\t\t\t\tnormal.push( dataview.getFloat32( ( PCDheader.points * offset.normal_y ) + PCDheader.size[ yIndex ] * i, this.littleEndian ) );\r\n\t\t\t\t\tnormal.push( dataview.getFloat32( ( PCDheader.points * offset.normal_z ) + PCDheader.size[ zIndex ] * i, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.intensity !== undefined ) {\r\n\r\n\t\t\t\t\tconst intensityIndex = PCDheader.fields.indexOf( 'intensity' );\r\n\t\t\t\t\tintensity.push( dataview.getFloat32( ( PCDheader.points * offset.intensity ) + PCDheader.size[ intensityIndex ] * i, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.label !== undefined ) {\r\n\r\n\t\t\t\t\tconst labelIndex = PCDheader.fields.indexOf( 'label' );\r\n\t\t\t\t\tlabel.push( dataview.getInt32( ( PCDheader.points * offset.label ) + PCDheader.size[ labelIndex ] * i, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// binary\r\n\r\n\t\tif ( PCDheader.data === 'binary' ) {\r\n\r\n\t\t\tconst dataview = new DataView( data, PCDheader.headerLen );\r\n\t\t\tconst offset = PCDheader.offset;\r\n\r\n\t\t\tfor ( let i = 0, row = 0; i < PCDheader.points; i ++, row += PCDheader.rowSize ) {\r\n\r\n\t\t\t\tif ( offset.x !== undefined ) {\r\n\r\n\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.x, this.littleEndian ) );\r\n\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.y, this.littleEndian ) );\r\n\t\t\t\t\tposition.push( dataview.getFloat32( row + offset.z, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.rgb !== undefined ) {\r\n\r\n\t\t\t\t\tconst r = dataview.getUint8( row + offset.rgb + 2 ) / 255.0;\r\n\t\t\t\t\tconst g = dataview.getUint8( row + offset.rgb + 1 ) / 255.0;\r\n\t\t\t\t\tconst b = dataview.getUint8( row + offset.rgb + 0 ) / 255.0;\r\n\r\n\t\t\t\t\tc.set( r, g, b ).convertSRGBToLinear();\r\n\r\n\t\t\t\t\tcolor.push( c.r, c.g, c.b );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.normal_x !== undefined ) {\r\n\r\n\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_x, this.littleEndian ) );\r\n\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_y, this.littleEndian ) );\r\n\t\t\t\t\tnormal.push( dataview.getFloat32( row + offset.normal_z, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.intensity !== undefined ) {\r\n\r\n\t\t\t\t\tintensity.push( dataview.getFloat32( row + offset.intensity, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset.label !== undefined ) {\r\n\r\n\t\t\t\t\tlabel.push( dataview.getInt32( row + offset.label, this.littleEndian ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tconst geometry = new BufferGeometry();\r\n\r\n\t\tif ( position.length > 0 ) geometry.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\r\n\t\tif ( normal.length > 0 ) geometry.setAttribute( 'normal', new Float32BufferAttribute( normal, 3 ) );\r\n\t\tif ( color.length > 0 ) geometry.setAttribute( 'color', new Float32BufferAttribute( color, 3 ) );\r\n\t\tif ( intensity.length > 0 ) geometry.setAttribute( 'intensity', new Float32BufferAttribute( intensity, 1 ) );\r\n\t\tif ( label.length > 0 ) geometry.setAttribute( 'label', new Int32BufferAttribute( label, 1 ) );\r\n\r\n\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\t// build material\r\n\r\n\t\tconst material = new PointsMaterial( { size: 0.005 } );\r\n\r\n\t\tif ( color.length > 0 ) {\r\n\r\n\t\t\tmaterial.vertexColors = true;\r\n\r\n\t\t}\r\n\r\n\t\t// build point cloud\r\n\r\n\t\treturn new Points( geometry, material );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PCDLoader };\r\n"],
  "mappings": "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",
  "names": ["data", "PCDheader"]
}
